// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package tracing represents the imported interface "wasi:otel/tracing@0.2.0-draft".
package tracing

import (
	wallclock "github.com/calebschoepp/opentelemetry-wasi/internal/wasi/clocks/wall-clock"
	"go.bytecodealliance.org/cm"
)

// DateTime represents the type alias "wasi:otel/tracing@0.2.0-draft#datetime".
//
// See [wallclock.DateTime] for more information.
type DateTime = wallclock.DateTime

// TraceID represents the string "wasi:otel/tracing@0.2.0-draft#trace-id".
//
// The trace that this `span-context` belongs to.
//
// 16 bytes encoded as a hexadecimal string.
//
//	type trace-id = string
type TraceID string

// SpanID represents the string "wasi:otel/tracing@0.2.0-draft#span-id".
//
// The id of this `span-context`.
//
// 8 bytes encoded as a hexadecimal string.
//
//	type span-id = string
type SpanID string

// TraceFlags represents the flags "wasi:otel/tracing@0.2.0-draft#trace-flags".
//
// Flags that can be set on a `span-context`.
//
//	flags trace-flags {
//		sampled,
//	}
type TraceFlags uint8

const (
	// Whether the `span` should be sampled or not.
	TraceFlagsSampled TraceFlags = 1 << iota
)

// TraceState represents the list "wasi:otel/tracing@0.2.0-draft#trace-state".
//
// Carries system-specific configuration data, represented as a list of key-value
// pairs. `trace-state` allows multiple tracing systems to participate in the same
// trace.
//
// If any invalid keys or values are provided then the `trace-state` will be treated
// as an empty list.
//
//	type trace-state = list<tuple<string, string>>
type TraceState cm.List[[2]string]

// SpanContext represents the record "wasi:otel/tracing@0.2.0-draft#span-context".
//
// Identifying trace information about a span that can be serialized and propagated.
//
//	record span-context {
//		trace-id: trace-id,
//		span-id: span-id,
//		trace-flags: trace-flags,
//		is-remote: bool,
//		trace-state: trace-state,
//	}
type SpanContext struct {
	_ cm.HostLayout `json:"-"`
	// The `trace-id` for this `span-context`.
	TraceID TraceID `json:"trace-id"`

	// The `span-id` for this `span-context`.
	SpanID SpanID `json:"span-id"`

	// The `trace-flags` for this `span-context`.
	TraceFlags TraceFlags `json:"trace-flags"`

	// Whether this `span-context` was propagated from a remote parent.
	IsRemote bool `json:"is-remote"`

	// The `trace-state` for this `span-context`.
	TraceState TraceState `json:"trace-state"`
}

// SpanKind represents the enum "wasi:otel/tracing@0.2.0-draft#span-kind".
//
// Describes the relationship between the Span, its parents, and its children in a
// trace.
//
//	enum span-kind {
//		client,
//		server,
//		producer,
//		consumer,
//		internal
//	}
type SpanKind uint8

const (
	// Indicates that the span describes a request to some remote service. This span is
	// usually the parent of a remote server span and does not end until the response
	// is received.
	SpanKindClient SpanKind = iota

	// Indicates that the span covers server-side handling of a synchronous RPC or other
	// remote request. This span is often the child of a remote client span that was expected
	// to wait for a response.
	SpanKindServer

	// Indicates that the span describes the initiators of an asynchronous request. This
	// parent span will often end before the corresponding child consumer span, possibly
	// even before the child span starts. In messaging scenarios with batching, tracing
	// individual messages requires a new producer span per message to be created.
	SpanKindProducer

	// Indicates that the span describes a child of an asynchronous consumer request.
	SpanKindConsumer

	// Default value. Indicates that the span represents an internal operation within
	// an application, as opposed to an operations with remote parents or children.
	SpanKindInternal
)

var _SpanKindStrings = [5]string{
	"client",
	"server",
	"producer",
	"consumer",
	"internal",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e SpanKind) String() string {
	return _SpanKindStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e SpanKind) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *SpanKind) UnmarshalText(text []byte) error {
	return _SpanKindUnmarshalCase(e, text)
}

var _SpanKindUnmarshalCase = cm.CaseUnmarshaler[SpanKind](_SpanKindStrings[:])

// Key represents the string "wasi:otel/tracing@0.2.0-draft#key".
//
// The key part of attribute `key-value` pairs.
//
//	type key = string
type Key string

// Value represents the variant "wasi:otel/tracing@0.2.0-draft#value".
//
// The value part of attribute `key-value` pairs.
//
//	variant value {
//		%string(string),
//		%bool(bool),
//		%f64(f64),
//		%s64(s64),
//		string-array(list<string>),
//		bool-array(list<bool>),
//		f64-array(list<f64>),
//		s64-array(list<s64>),
//	}
type Value cm.Variant[uint8, string, float64]

// ValueString_ returns a [Value] of case "string".
//
// A string value.
func ValueString_(data string) Value {
	return cm.New[Value](0, data)
}

// String_ returns a non-nil *[string] if [Value] represents the variant case "string".
func (self *Value) String_() *string {
	return cm.Case[string](self, 0)
}

// ValueBool returns a [Value] of case "bool".
//
// A boolean value.
func ValueBool(data bool) Value {
	return cm.New[Value](1, data)
}

// Bool returns a non-nil *[bool] if [Value] represents the variant case "bool".
func (self *Value) Bool() *bool {
	return cm.Case[bool](self, 1)
}

// ValueF64 returns a [Value] of case "f64".
//
// A double precision floating point value.
func ValueF64(data float64) Value {
	return cm.New[Value](2, data)
}

// F64 returns a non-nil *[float64] if [Value] represents the variant case "f64".
func (self *Value) F64() *float64 {
	return cm.Case[float64](self, 2)
}

// ValueS64 returns a [Value] of case "s64".
//
// A signed 64 bit integer value.
func ValueS64(data int64) Value {
	return cm.New[Value](3, data)
}

// S64 returns a non-nil *[int64] if [Value] represents the variant case "s64".
func (self *Value) S64() *int64 {
	return cm.Case[int64](self, 3)
}

// ValueStringArray returns a [Value] of case "string-array".
//
// A homogeneous array of string values.
func ValueStringArray(data cm.List[string]) Value {
	return cm.New[Value](4, data)
}

// StringArray returns a non-nil *[cm.List[string]] if [Value] represents the variant case "string-array".
func (self *Value) StringArray() *cm.List[string] {
	return cm.Case[cm.List[string]](self, 4)
}

// ValueBoolArray returns a [Value] of case "bool-array".
//
// A homogeneous array of boolean values.
func ValueBoolArray(data cm.List[bool]) Value {
	return cm.New[Value](5, data)
}

// BoolArray returns a non-nil *[cm.List[bool]] if [Value] represents the variant case "bool-array".
func (self *Value) BoolArray() *cm.List[bool] {
	return cm.Case[cm.List[bool]](self, 5)
}

// ValueF64Array returns a [Value] of case "f64-array".
//
// A homogeneous array of double precision floating point values.
func ValueF64Array(data cm.List[float64]) Value {
	return cm.New[Value](6, data)
}

// F64Array returns a non-nil *[cm.List[float64]] if [Value] represents the variant case "f64-array".
func (self *Value) F64Array() *cm.List[float64] {
	return cm.Case[cm.List[float64]](self, 6)
}

// ValueS64Array returns a [Value] of case "s64-array".
//
// A homogeneous array of 64 bit integer values.
func ValueS64Array(data cm.List[int64]) Value {
	return cm.New[Value](7, data)
}

// S64Array returns a non-nil *[cm.List[int64]] if [Value] represents the variant case "s64-array".
func (self *Value) S64Array() *cm.List[int64] {
	return cm.Case[cm.List[int64]](self, 7)
}

var _ValueStrings = [8]string{
	"string",
	"bool",
	"f64",
	"s64",
	"string-array",
	"bool-array",
	"f64-array",
	"s64-array",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Value) String() string {
	return _ValueStrings[v.Tag()]
}

// KeyValue represents the record "wasi:otel/tracing@0.2.0-draft#key-value".
//
// A key-value pair describing an attribute.
//
//	record key-value {
//		key: key,
//		value: value,
//	}
type KeyValue struct {
	_ cm.HostLayout `json:"-"`
	// The attribute name.
	Key Key `json:"key"`

	// The attribute value.
	Value Value `json:"value"`
}

// Event represents the record "wasi:otel/tracing@0.2.0-draft#event".
//
// An event describing a specific moment in time on a span and associated attributes.
//
//	record event {
//		name: string,
//		time: datetime,
//		attributes: list<key-value>,
//	}
type Event struct {
	_ cm.HostLayout `json:"-"`
	// Event name.
	Name string `json:"name"`

	// Event time.
	Time DateTime `json:"time"`

	// Event attributes.
	Attributes cm.List[KeyValue] `json:"attributes"`
}

// Link represents the record "wasi:otel/tracing@0.2.0-draft#link".
//
// Describes a relationship to another `span`.
//
//	record link {
//		span-context: span-context,
//		attributes: list<key-value>,
//	}
type Link struct {
	_ cm.HostLayout `json:"-"`
	// Denotes which `span` to link to.
	SpanContext SpanContext `json:"span-context"`

	// Attributes describing the link.
	Attributes cm.List[KeyValue] `json:"attributes"`
}

// Status represents the variant "wasi:otel/tracing@0.2.0-draft#status".
//
// The `status` of a `span`.
//
//	variant status {
//		unset,
//		ok,
//		error(string),
//	}
type Status cm.Variant[uint8, string, string]

// StatusUnset returns a [Status] of case "unset".
//
// The default status.
func StatusUnset() Status {
	var data struct{}
	return cm.New[Status](0, data)
}

// Unset returns true if [Status] represents the variant case "unset".
func (self *Status) Unset() bool {
	return self.Tag() == 0
}

// StatusOK returns a [Status] of case "ok".
//
// The operation has been validated by an Application developer or Operator to have
// completed successfully.
func StatusOK() Status {
	var data struct{}
	return cm.New[Status](1, data)
}

// OK returns true if [Status] represents the variant case "ok".
func (self *Status) OK() bool {
	return self.Tag() == 1
}

// StatusError returns a [Status] of case "error".
//
// The operation contains an error with a description.
func StatusError(data string) Status {
	return cm.New[Status](2, data)
}

// Error returns a non-nil *[string] if [Status] represents the variant case "error".
func (self *Status) Error() *string {
	return cm.Case[string](self, 2)
}

var _StatusStrings = [3]string{
	"unset",
	"ok",
	"error",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Status) String() string {
	return _StatusStrings[v.Tag()]
}

// InstrumentationScope represents the record "wasi:otel/tracing@0.2.0-draft#instrumentation-scope".
//
// Describes the instrumentation scope that produced a span.
//
//	record instrumentation-scope {
//		name: string,
//		version: option<string>,
//		schema-url: option<string>,
//		attributes: list<key-value>,
//	}
type InstrumentationScope struct {
	_ cm.HostLayout `json:"-"`
	// Name of the instrumentation scope.
	Name string `json:"name"`

	// The library version.
	Version cm.Option[string] `json:"version"`

	// Schema URL used by this library.
	// https://github.com/open-telemetry/opentelemetry-specification/blob/v1.9.0/specification/schemas/overview.md#schema-url
	SchemaURL cm.Option[string] `json:"schema-url"`

	// Specifies the instrumentation scope attributes to associate with emitted telemetry.
	Attributes cm.List[KeyValue] `json:"attributes"`
}

// SpanData represents the record "wasi:otel/tracing@0.2.0-draft#span-data".
//
// The data associated with a span.
//
//	record span-data {
//		span-context: span-context,
//		parent-span-id: string,
//		span-kind: span-kind,
//		name: string,
//		start-time: datetime,
//		end-time: datetime,
//		attributes: list<key-value>,
//		events: list<event>,
//		links: list<link>,
//		status: status,
//		instrumentation-scope: instrumentation-scope,
//		dropped-attributes: u32,
//		dropped-events: u32,
//		dropped-links: u32,
//	}
type SpanData struct {
	_ cm.HostLayout `json:"-"`
	// Span context.
	SpanContext SpanContext `json:"span-context"`

	// Span parent id.
	ParentSpanID string `json:"parent-span-id"`

	// Span kind.
	SpanKind SpanKind `json:"span-kind"`

	// Span name.
	Name string `json:"name"`

	// Span start time.
	StartTime DateTime `json:"start-time"`

	// Span end time.
	EndTime DateTime `json:"end-time"`

	// Span attributes.
	Attributes cm.List[KeyValue] `json:"attributes"`

	// Span events.
	Events cm.List[Event] `json:"events"`

	// Span Links.
	Links cm.List[Link] `json:"links"`

	// Span status.
	Status Status `json:"status"`

	// Instrumentation scope that produced this span.
	InstrumentationScope InstrumentationScope `json:"instrumentation-scope"`

	// Number of attributes dropped by the span due to limits being reached.
	DroppedAttributes uint32 `json:"dropped-attributes"`

	// Number of events dropped by the span due to limits being reached.
	DroppedEvents uint32 `json:"dropped-events"`

	// Number of links dropped by the span due to limits being reached.
	DroppedLinks uint32 `json:"dropped-links"`
}

// OnStart represents the imported function "on-start".
//
// Called when a span is started.
//
//	on-start: func(context: span-context)
//
//go:nosplit
func OnStart(context SpanContext) {
	context0, context1, context2, context3, context4, context5, context6, context7 := lower_SpanContext(context)
	wasmimport_OnStart((*uint8)(context0), (uint32)(context1), (*uint8)(context2), (uint32)(context3), (uint32)(context4), (uint32)(context5), (*[2]string)(context6), (uint32)(context7))
	return
}

// OnEnd represents the imported function "on-end".
//
// Called when a span is ended.
//
//	on-end: func(span: span-data)
//
//go:nosplit
func OnEnd(span SpanData) {
	span_ := &span
	wasmimport_OnEnd((*SpanData)(span_))
	return
}

// OuterSpanContext represents the imported function "outer-span-context".
//
// Returns the span context of the host.
//
//	outer-span-context: func() -> span-context
//
//go:nosplit
func OuterSpanContext() (result SpanContext) {
	wasmimport_OuterSpanContext(&result)
	return
}
